<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [HAL_STM32_LittleFS_Demo\HAL_STM32_LittleFS_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image HAL_STM32_LittleFS_Demo\HAL_STM32_LittleFS_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Dec 28 15:18:19 2021
<BR><P>
<H3>Maximum Stack Usage =       1112 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; lfs_test &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[d0]">lfs_file_rawwrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">lfs_file_rawwrite</a><BR>
 <LI><a href="#[cf]">lfs_file_rawread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a3]">lfs_file_flush</a><BR>
 <LI><a href="#[ac]">lfs_dir_traverse</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ac]">lfs_dir_traverse</a><BR>
 <LI><a href="#[aa]">lfs_dir_drop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">lfs_dir_commit</a><BR>
 <LI><a href="#[c0]">lfs_fs_relocate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">lfs_dir_commit</a><BR>
 <LI><a href="#[bc]">lfs_dir_split</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b3]">lfs_dir_compact</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[38]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[39]">lfs_alloc_lookahead</a> from lfs.o(i.lfs_alloc_lookahead) referenced from lfs.o(i.lfs_alloc)
 <LI><a href="#[42]">lfs_deskio_erase</a> from lfs_port.o(i.lfs_deskio_erase) referenced from lfs_port.o(.constdata)
 <LI><a href="#[41]">lfs_deskio_prog</a> from lfs_port.o(i.lfs_deskio_prog) referenced from lfs_port.o(.constdata)
 <LI><a href="#[40]">lfs_deskio_read</a> from lfs_port.o(i.lfs_deskio_read) referenced from lfs_port.o(.constdata)
 <LI><a href="#[43]">lfs_deskio_sync</a> from lfs_port.o(i.lfs_deskio_sync) referenced from lfs_port.o(.constdata)
 <LI><a href="#[3a]">lfs_dir_commit_commit</a> from lfs.o(i.lfs_dir_commit_commit) referenced from lfs.o(i.lfs_dir_commit)
 <LI><a href="#[3a]">lfs_dir_commit_commit</a> from lfs.o(i.lfs_dir_commit_commit) referenced from lfs.o(i.lfs_dir_compact)
 <LI><a href="#[3b]">lfs_dir_commit_size</a> from lfs.o(i.lfs_dir_commit_size) referenced from lfs.o(i.lfs_dir_compact)
 <LI><a href="#[3c]">lfs_dir_find_match</a> from lfs.o(i.lfs_dir_find_match) referenced from lfs.o(i.lfs_dir_find)
 <LI><a href="#[3c]">lfs_dir_find_match</a> from lfs.o(i.lfs_dir_find_match) referenced from lfs.o(i.lfs_rawmount)
 <LI><a href="#[3d]">lfs_dir_traverse_filter</a> from lfs.o(i.lfs_dir_traverse_filter) referenced from lfs.o(i.lfs_dir_traverse)
 <LI><a href="#[3e]">lfs_fs_parent_match</a> from lfs.o(i.lfs_fs_parent_match) referenced from lfs.o(i.lfs_fs_parent)
 <LI><a href="#[3f]">lfs_fs_size_count</a> from lfs.o(i.lfs_fs_size_count) referenced from lfs.o(i.lfs_fs_rawsize)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[44]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c9]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[d9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[8b]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
</UL>

<P><STRONG><a name="[c6]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[c7]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fe]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ff]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[4d]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>HAL_GPIO_Init</STRONG> (Thumb, 766 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[69]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadUniqueID
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadCapacity
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[4e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[6e]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4f]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[52]"></a>HAL_MspInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[54]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[50]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[57]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[5a]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[59]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[5b]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[58]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[5c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[5e]"></a>HAL_SPI_Init</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[5f]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[53]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[63]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[64]"></a>HAL_UART_MspInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[66]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>MX_GPIO_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>MX_SPI1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SystemClock_Config</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deskio_erase
</UL>

<P><STRONG><a name="[75]"></a>W25QXX_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25QXX_Init &rArr; W25QXX_ReadUniqueID &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadUniqueID
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadCapacity
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>W25QXX_Read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25QXX_Read &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deskio_read
</UL>

<P><STRONG><a name="[77]"></a>W25QXX_ReadCapacity</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25QXX_ReadCapacity &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[76]"></a>W25QXX_ReadID</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = W25QXX_ReadID &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[7a]"></a>W25QXX_ReadSR</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = W25QXX_ReadSR &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[78]"></a>W25QXX_ReadUniqueID</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_ReadUniqueID))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25QXX_ReadUniqueID &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[73]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[72]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = W25QXX_Write_Enable &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[7b]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deskio_prog
</UL>

<P><STRONG><a name="[7c]"></a>W25QXX_Write_Page</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SPI_ReadWriteByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[7d]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[84]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[ed]"></a>__ARM_pop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lfs.o(i.__ARM_pop))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_popc
</UL>

<P><STRONG><a name="[101]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[38]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[ba]"></a>lfs_crc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lfs_util.o(i.lfs_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[cd]"></a>lfs_file_close</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = lfs_file_close &rArr; lfs_file_rawclose &rArr; lfs_file_rawsync &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
</UL>

<P><STRONG><a name="[d2]"></a>lfs_file_open</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lfs.o(i.lfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopen
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
</UL>

<P><STRONG><a name="[dd]"></a>lfs_file_read</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lfs.o(i.lfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lfs_file_read &rArr; lfs_file_rawread &rArr;  lfs_file_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
</UL>

<P><STRONG><a name="[de]"></a>lfs_file_rewind</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_rewind))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = lfs_file_rewind &rArr; lfs_file_rawrewind &rArr; lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawrewind
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
</UL>

<P><STRONG><a name="[df]"></a>lfs_file_write</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lfs.o(i.lfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lfs_file_write &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
</UL>

<P><STRONG><a name="[e0]"></a>lfs_format</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lfs.o(i.lfs_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lfs_format &rArr; lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
</UL>

<P><STRONG><a name="[eb]"></a>lfs_mount</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lfs.o(i.lfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lfs_mount &rArr; lfs_rawmount &rArr; lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
</UL>

<P><STRONG><a name="[f1]"></a>lfs_test</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lfs_port.o(i.lfs_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = lfs_test &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_unmount
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rewind
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>lfs_unmount</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lfs.o(i.lfs_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_unmount &rArr; lfs_rawunmount
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawunmount
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = main &rArr; lfs_test &rArr; lfs_file_open &rArr; lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_test
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[74]"></a>W25QXX_SPI_ReadWriteByte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadUniqueID
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadCapacity
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[62]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[6d]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[5d]"></a>RCC_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[55]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[56]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[65]"></a>UART_SetConfig</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[67]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[82]"></a>lfs_aligndown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lfs.o(i.lfs_aligndown))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>

<P><STRONG><a name="[81]"></a>lfs_alignup</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lfs.o(i.lfs_alignup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[83]"></a>lfs_alloc</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, lfs.o(i.lfs_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[88]"></a>lfs_alloc_ack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_alloc_ack))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
</UL>

<P><STRONG><a name="[87]"></a>lfs_alloc_drop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lfs.o(i.lfs_alloc_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_alloc_drop
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[39]"></a>lfs_alloc_lookahead</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lfs.o(i.lfs_alloc_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_alloc_lookahead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_alloc)
</UL>
<P><STRONG><a name="[89]"></a>lfs_bd_cmp</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, lfs.o(i.lfs_bd_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[96]"></a>lfs_bd_erase</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lfs.o(i.lfs_bd_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_bd_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[8c]"></a>lfs_bd_flush</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lfs.o(i.lfs_bd_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>

<P><STRONG><a name="[8f]"></a>lfs_bd_prog</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, lfs.o(i.lfs_bd_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[8a]"></a>lfs_bd_read</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, lfs.o(i.lfs_bd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
</UL>

<P><STRONG><a name="[92]"></a>lfs_bd_sync</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lfs.o(i.lfs_bd_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lfs_bd_sync &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[8d]"></a>lfs_cache_drop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_cache_drop))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[8e]"></a>lfs_cache_zero</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lfs.o(i.lfs_cache_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_cache_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
</UL>

<P><STRONG><a name="[93]"></a>lfs_ctz</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lfs.o(i.lfs_ctz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_ctz
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_npw2
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[95]"></a>lfs_ctz_extend</STRONG> (Thumb, 396 bytes, Stack size 88 bytes, lfs.o(i.lfs_ctz_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lfs_ctz_extend &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
</UL>

<P><STRONG><a name="[9a]"></a>lfs_ctz_find</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, lfs.o(i.lfs_ctz_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lfs_ctz_find &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_npw2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
</UL>

<P><STRONG><a name="[9b]"></a>lfs_ctz_fromle32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lfs.o(i.lfs_ctz_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_ctz_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[97]"></a>lfs_ctz_index</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lfs.o(i.lfs_ctz_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lfs_ctz_index &rArr; lfs_popc
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_popc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[9d]"></a>lfs_ctz_tole32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lfs.o(i.lfs_ctz_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_ctz_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
</UL>

<P><STRONG><a name="[9e]"></a>lfs_ctz_traverse</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, lfs.o(i.lfs_ctz_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lfs_ctz_traverse &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
</UL>

<P><STRONG><a name="[ea]"></a>lfs_deinit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lfs.o(i.lfs_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawunmount
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
</UL>

<P><STRONG><a name="[9f]"></a>lfs_dir_alloc</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lfs.o(i.lfs_dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lfs_dir_alloc &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
</UL>

<P><STRONG><a name="[a0]"></a>lfs_dir_commit</STRONG> (Thumb, 1006 bytes, Stack size 160 bytes, lfs.o(i.lfs_dir_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_chunk
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
</UL>

<P><STRONG><a name="[3a]"></a>lfs_dir_commit_commit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lfs.o(i.lfs_dir_commit_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lfs_dir_commit_commit &rArr; lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(i.lfs_dir_commit)
<LI> lfs.o(i.lfs_dir_compact)
</UL>
<P><STRONG><a name="[3b]"></a>lfs_dir_commit_size</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lfs.o(i.lfs_dir_commit_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lfs_dir_commit_size &rArr; lfs_tag_dsize
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_dir_compact)
</UL>
<P><STRONG><a name="[b1]"></a>lfs_dir_commitattr</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, lfs.o(i.lfs_dir_commitattr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lfs_dir_commitattr &rArr; lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tobe32
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit_commit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[b2]"></a>lfs_dir_commitcrc</STRONG> (Thumb, 474 bytes, Stack size 80 bytes, lfs.o(i.lfs_dir_commitcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lfs_dir_commitcrc &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tobe32
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_sync
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[b8]"></a>lfs_dir_commitprog</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lfs.o(i.lfs_dir_commitprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lfs_dir_commitprog &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>

<P><STRONG><a name="[b3]"></a>lfs_dir_compact</STRONG> (Thumb, 998 bytes, Stack size 144 bytes, lfs.o(i.lfs_dir_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_swap
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitprog
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[aa]"></a>lfs_dir_drop</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lfs.o(i.lfs_dir_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = lfs_dir_drop &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[b5]"></a>lfs_dir_fetch</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lfs.o(i.lfs_dir_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[c1]"></a>lfs_dir_fetchmatch</STRONG> (Thumb, 1226 bytes, Stack size 120 bytes, lfs.o(i.lfs_dir_fetchmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isvalid
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_chunk
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_swap
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
</UL>

<P><STRONG><a name="[c5]"></a>lfs_dir_find</STRONG> (Thumb, 386 bytes, Stack size 88 bytes, lfs.o(i.lfs_dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[3c]"></a>lfs_dir_find_match</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, lfs.o(i.lfs_dir_find_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lfs_dir_find_match &rArr; lfs_bd_cmp &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(i.lfs_dir_find)
<LI> lfs.o(i.lfs_rawmount)
</UL>
<P><STRONG><a name="[c8]"></a>lfs_dir_get</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lfs.o(i.lfs_dir_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[af]"></a>lfs_dir_getgstate</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, lfs.o(i.lfs_dir_getgstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_xor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[cb]"></a>lfs_dir_getread</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, lfs.o(i.lfs_dir_getread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lfs_dir_getread &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alignup
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_aligndown
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
</UL>

<P><STRONG><a name="[ca]"></a>lfs_dir_getslice</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, lfs.o(i.lfs_dir_getslice))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lfs_dir_getslice &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
</UL>

<P><STRONG><a name="[bc]"></a>lfs_dir_split</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, lfs.o(i.lfs_dir_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + In Cycle
<LI>Call Chain = lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[ac]"></a>lfs_dir_traverse</STRONG> (Thumb, 504 bytes, Stack size 112 bytes, lfs.o(i.lfs_dir_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = lfs_dir_traverse &rArr;  lfs_dir_traverse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[3d]"></a>lfs_dir_traverse_filter</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lfs.o(i.lfs_dir_traverse_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lfs_dir_traverse_filter &rArr; lfs_tag_splice
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_dir_traverse)
</UL>
<P><STRONG><a name="[a3]"></a>lfs_file_flush</STRONG> (Thumb, 300 bytes, Stack size 112 bytes, lfs.o(i.lfs_file_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[a2]"></a>lfs_file_outline</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_outline))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lfs_file_outline &rArr; lfs_file_relocate &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[ce]"></a>lfs_file_rawclose</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_rawclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = lfs_file_rawclose &rArr; lfs_file_rawsync &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_remove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[d3]"></a>lfs_file_rawopen</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lfs.o(i.lfs_file_rawopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = lfs_file_rawopen &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
</UL>

<P><STRONG><a name="[d6]"></a>lfs_file_rawopencfg</STRONG> (Thumb, 676 bytes, Stack size 80 bytes, lfs.o(i.lfs_file_rawopencfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mlist_append
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopen
</UL>

<P><STRONG><a name="[cf]"></a>lfs_file_rawread</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, lfs.o(i.lfs_file_rawread))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = lfs_file_rawread &rArr;  lfs_file_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[da]"></a>lfs_file_rawrewind</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_rawrewind))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lfs_file_rawrewind &rArr; lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rewind
</UL>

<P><STRONG><a name="[db]"></a>lfs_file_rawseek</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lfs.o(i.lfs_file_rawseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lfs_file_rawseek &rArr; lfs_file_flush &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsize
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawrewind
</UL>

<P><STRONG><a name="[dc]"></a>lfs_file_rawsize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lfs.o(i.lfs_file_rawsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_file_rawsize
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawseek
</UL>

<P><STRONG><a name="[d4]"></a>lfs_file_rawsync</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, lfs.o(i.lfs_file_rawsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lfs_file_rawsync &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
</UL>

<P><STRONG><a name="[d0]"></a>lfs_file_rawwrite</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, lfs.o(i.lfs_file_rawwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + In Cycle
<LI>Call Chain = lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_max
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[d1]"></a>lfs_file_relocate</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, lfs.o(i.lfs_file_relocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lfs_file_relocate &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_drop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_erase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_outline
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[b9]"></a>lfs_frombe32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lfs.o(i.lfs_frombe32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_frombe32
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tobe32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[99]"></a>lfs_fromle32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lfs.o(i.lfs_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_superblock_fromle32
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[e2]"></a>lfs_fs_demove</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, lfs.o(i.lfs_fs_demove))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = lfs_fs_demove &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_prepmove
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
</UL>

<P><STRONG><a name="[e5]"></a>lfs_fs_deorphan</STRONG> (Thumb, 338 bytes, Stack size 152 bytes, lfs.o(i.lfs_fs_deorphan))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = lfs_fs_deorphan &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
</UL>

<P><STRONG><a name="[d7]"></a>lfs_fs_forceconsistency</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lfs.o(i.lfs_fs_forceconsistency))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = lfs_fs_forceconsistency &rArr; lfs_fs_deorphan &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[e7]"></a>lfs_fs_parent</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, lfs.o(i.lfs_fs_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lfs_fs_parent &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
</UL>

<P><STRONG><a name="[3e]"></a>lfs_fs_parent_match</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, lfs.o(i.lfs_fs_parent_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lfs_fs_parent_match &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_fs_parent)
</UL>
<P><STRONG><a name="[a9]"></a>lfs_fs_pred</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lfs.o(i.lfs_fs_pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lfs_fs_pred &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[e4]"></a>lfs_fs_prepmove</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lfs.o(i.lfs_fs_prepmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_fs_prepmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
</UL>

<P><STRONG><a name="[e8]"></a>lfs_fs_preporphans</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lfs.o(i.lfs_fs_preporphans))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_fs_preporphans &rArr; lfs_gstate_hasorphans
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
</UL>

<P><STRONG><a name="[bd]"></a>lfs_fs_rawsize</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lfs.o(i.lfs_fs_rawsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lfs_fs_rawsize &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[86]"></a>lfs_fs_rawtraverse</STRONG> (Thumb, 412 bytes, Stack size 104 bytes, lfs.o(i.lfs_fs_rawtraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lfs_fs_rawtraverse &rArr; lfs_dir_fetch &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type3
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_traverse
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[c0]"></a>lfs_fs_relocate</STRONG> (Thumb, 502 bytes, Stack size 96 bytes, lfs.o(i.lfs_fs_relocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = lfs_fs_relocate &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_id
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_fromle32
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_prepmove
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[3f]"></a>lfs_fs_size_count</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lfs.o(i.lfs_fs_size_count))
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(i.lfs_fs_rawsize)
</UL>
<P><STRONG><a name="[e3]"></a>lfs_gstate_hasmove</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lfs.o(i.lfs_gstate_hasmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_gstate_hasmove
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
</UL>

<P><STRONG><a name="[c4]"></a>lfs_gstate_hasmovehere</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lfs.o(i.lfs_gstate_hasmovehere))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_gstate_hasmovehere
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_type1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[e6]"></a>lfs_gstate_hasorphans</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lfs.o(i.lfs_gstate_hasorphans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_gstate_hasorphans
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
</UL>

<P><STRONG><a name="[ae]"></a>lfs_gstate_iszero</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lfs.o(i.lfs_gstate_iszero))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[b0]"></a>lfs_gstate_tole32</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lfs.o(i.lfs_gstate_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_gstate_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[ad]"></a>lfs_gstate_xor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lfs.o(i.lfs_gstate_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_gstate_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[e9]"></a>lfs_init</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, lfs.o(i.lfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lfs_init &rArr; lfs_cache_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_cache_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
</UL>

<P><STRONG><a name="[91]"></a>lfs_max</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lfs.o(i.lfs_max))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsize
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
</UL>

<P><STRONG><a name="[85]"></a>lfs_min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lfs.o(i.lfs_min))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getread
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_cmp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[d8]"></a>lfs_mlist_append</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_mlist_append))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[d5]"></a>lfs_mlist_remove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lfs.o(i.lfs_mlist_remove))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawclose
</UL>

<P><STRONG><a name="[94]"></a>lfs_npw2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lfs.o(i.lfs_npw2))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_find
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz
</UL>

<P><STRONG><a name="[a1]"></a>lfs_pair_cmp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lfs.o(i.lfs_pair_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_split
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[a8]"></a>lfs_pair_fromle32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lfs.o(i.lfs_pair_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_pair_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[be]"></a>lfs_pair_isnull</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lfs.o(i.lfs_pair_isnull))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[bf]"></a>lfs_pair_swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lfs.o(i.lfs_pair_swap))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[ab]"></a>lfs_pair_tole32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lfs.o(i.lfs_pair_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_pair_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[9c]"></a>lfs_popc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lfs.o(i.lfs_popc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_popc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_index
</UL>

<P><STRONG><a name="[e1]"></a>lfs_rawformat</STRONG> (Thumb, 216 bytes, Stack size 104 bytes, lfs.o(i.lfs_rawformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lfs_rawformat &rArr; lfs_dir_commit &rArr; lfs_dir_compact &rArr; lfs_dir_split &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_superblock_tole32
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_min
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
</UL>

<P><STRONG><a name="[ec]"></a>lfs_rawmount</STRONG> (Thumb, 504 bytes, Stack size 112 bytes, lfs.o(i.lfs_rawmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lfs_rawmount &rArr; lfs_dir_getgstate &rArr; lfs_dir_get &rArr; lfs_dir_getslice &rArr; lfs_bd_read &rArr; lfs_alignup
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isvalid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_superblock_fromle32
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawunmount
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_isnull
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_iszero
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getgstate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc_drop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
</UL>

<P><STRONG><a name="[f0]"></a>lfs_rawunmount</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lfs.o(i.lfs_rawunmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_rawunmount
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_unmount
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
</UL>

<P><STRONG><a name="[ef]"></a>lfs_superblock_fromle32</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lfs.o(i.lfs_superblock_fromle32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_superblock_fromle32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
</UL>

<P><STRONG><a name="[ee]"></a>lfs_superblock_tole32</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lfs.o(i.lfs_superblock_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_superblock_tole32 &rArr; lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tole32
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawformat
</UL>

<P><STRONG><a name="[a7]"></a>lfs_tag_chunk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_chunk))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_splice
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[b6]"></a>lfs_tag_dsize</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lfs.o(i.lfs_tag_dsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_tag_dsize
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_size
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_isdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit_size
</UL>

<P><STRONG><a name="[b4]"></a>lfs_tag_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_id))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_relocate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_demove
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[cc]"></a>lfs_tag_isdelete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_isdelete))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>

<P><STRONG><a name="[c2]"></a>lfs_tag_isvalid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_isvalid))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_rawmount
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[bb]"></a>lfs_tag_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_size))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_dsize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasorphans
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_deorphan
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_get
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
</UL>

<P><STRONG><a name="[c3]"></a>lfs_tag_splice</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lfs.o(i.lfs_tag_splice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_tag_splice
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_tag_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[a6]"></a>lfs_tag_type1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_type1))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmovehere
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_hasmove
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse_filter
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[a5]"></a>lfs_tag_type3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lfs.o(i.lfs_tag_type3))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[b7]"></a>lfs_tobe32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lfs.o(i.lfs_tobe32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_tobe32 &rArr; lfs_frombe32
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_frombe32
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
</UL>

<P><STRONG><a name="[98]"></a>lfs_tole32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lfs.o(i.lfs_tole32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfs_tole32 &rArr; lfs_fromle32
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fromle32
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_superblock_tole32
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_pair_tole32
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_gstate_tole32
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_tole32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_ctz_extend
</UL>

<P><STRONG><a name="[42]"></a>lfs_deskio_erase</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lfs_port.o(i.lfs_deskio_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lfs_deskio_erase &rArr; W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs_port.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>lfs_deskio_prog</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lfs_port.o(i.lfs_deskio_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lfs_deskio_prog &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs_port.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>lfs_deskio_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lfs_port.o(i.lfs_deskio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lfs_deskio_read &rArr; W25QXX_Read &rArr; W25QXX_SPI_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs_port.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>lfs_deskio_sync</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lfs_port.o(i.lfs_deskio_sync))
<BR>[Address Reference Count : 1]<UL><LI> lfs_port.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[80]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
